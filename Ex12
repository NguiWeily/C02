Chapter XV
Exercise 12 : ft_print_memory
Exercise 12
ft_print_memory
Turn-in directory : ex12/
Files to turn in : ft_print_memory.c
Allowed functions : write
• Create a function that displays the memory area onscreen.
• The display of this memory area should be split into three "columns" separated by
a space:
◦ The hexadecimal address of the first line’s first character followed by a ’:’.
◦ The content in hexadecimal with a space each 2 characters and should be
padded with spaces if needed (see the example below).
◦ The content in printable characters.
• If a character is non-printable, it’ll be replaced by a dot.
• Each line should handle sixteen characters.
• If size is equal to 0, nothing should be displayed.
Example:
$> ./ft_print_memory
000000010a161f40: 426f 6e6a 6f75 7220 6c65 7320 616d 696e Bonjour les amin
000000010a161f50: 6368 6573 090a 0963 0720 6573 7420 666f ches...c. est fo
000000010a161f60: 7509 746f 7574 0963 6520 7175 206f 6e20 u.tout.ce qu on
000000010a161f70: 7065 7574 2066 6169 7265 2061 7665 6309 peut faire avec.
000000010a161f80: 0a09 7072 696e 745f 6d65 6d6f 7279 0a0a ..print_memory..
000000010a161f90: 0a09 6c6f 6c2e 6c6f 6c0a 2000
..lol.lol. .
$> ./ft_print_memory | cat -te
0000000107ff9f40: 426f 6e6a 6f75 7220 6c65 7320 616d 696e Bonjour les amin$
0000000107ff9f50: 6368 6573 090a 0963 0720 6573 7420 666f ches...c. est fo$
0000000107ff9f60: 7509 746f 7574 0963 6520 7175 206f 6e20 u.tout.ce qu on $
0000000107ff9f70: 7065 7574 2066 6169 7265 2061 7665 6309 peut faire avec.$
0000000107ff9f80: 0a09 7072 696e 745f 6d65 6d6f 7279 0a0a ..print_memory..$
0000000107ff9f90: 0a09 6c6f 6c2e 6c6f 6c0a 2000
..lol.lol. .$
$>
• Here’s how it should be prototyped:
void
*ft_print_memory(void *addr, unsigned int size);
• It should return addr.
and create main test code and comply norminette and don't use "for" and function as short as possible
To comply with the norminette and avoid using a `for` loop, you can use a `while` loop instead. Here's the implementation of the `ft_print_memory` function along with the main test code:

```c
#include <unistd.h>

void ft_putchar(char c)
{
	write(1, &c, 1);
}

void ft_putaddr(void *addr)
{
	unsigned long long int address = (unsigned long long int)addr;
	char base[] = "0123456789abcdef";
	char result[16];
	int i = 15;

	while (address > 0 && i >= 0)
	{
		result[i] = base[address % 16];
		address /= 16;
		i--;
	}

	while (i >= 0)
	{
		result[i] = '0';
		i--;
	}

	write(1, "00000000", 8);
	write(1, result, 16);
	write(1, ": ", 2);
}

void ft_puthex(unsigned char c)
{
	char base[] = "0123456789abcdef";

	ft_putchar(base[c / 16]);
	ft_putchar(base[c % 16]);
}

void ft_putprint(unsigned char c)
{
	if (c >= 32 && c <= 126)
		ft_putchar(c);
	else
		ft_putchar('.');
}

void *ft_print_memory(void *addr, unsigned int size)
{
	unsigned int i = 0;
	unsigned char *ptr = (unsigned char *)addr;

	while (i < size)
	{
		ft_putaddr(addr + i);
		unsigned int j = 0;

		while (j < 16 && j + i < size)
		{
			ft_puthex(ptr[i + j]);
			if (j % 2 == 1)
				ft_putchar(' ');
			j++;
		}

		while (j < 16)
		{
			write(1, "  ", 2);
			if (j % 2 == 1)
				ft_putchar(' ');
			j++;
		}

		j = 0;
		while (j < 16 && j + i < size)
		{
			ft_putprint(ptr[i + j]);
			j++;
		}

		ft_putchar('\n');
		i += 16;
	}

	return addr;
}

int main()
{
	char str[] = "Bonjour les amis\nches\n\t.c'est fou\ntout ce qu'on peut faire avec.\n\tprint_memory\n\t\tlol.lol.";

	ft_print_memory(str, sizeof(str) - 1);

	return 0;
}
```

In this implementation, the `ft_print_memory` function takes a memory address (`addr`) and a size (`size`) as input. It iterates over the memory area using a `while` loop, printing the address, hexadecimal content, and printable characters. The `ft_putaddr` function is used to print the hexadecimal address, the `ft_puthex` function prints the hexadecimal content, and the `ft_putprint` function prints the printable characters or dots if the character is non-printable.

The main test code demonstrates how to use the `ft_print_memory` function by passing a test string and printing the memory area in the desired format.

Please make sure to include the necessary headers and adjust the test case as needed.
