Chapter XII
Exercise 09 : ft_strcapitalize
Exercise 09
ft_strcapitalize
Turn-in directory : ex09/
Files to turn in : ft_strcapitalize.c
Allowed functions : None
• Create a function that capitalizes the first letter of each word and transforms all
other letters to lowercase.
• A word is a string of alphanumeric characters.
• Here’s how it should be prototyped :
char
*ft_strcapitalize(char *str);
• It should return str.
• For example:
salut, comment tu vas ? 42mots quarante-deux; cinquante+et+un
• Becomes:
Salut, Comment Tu Vas ? 42mots Quarante-Deux; Cinquante+Et+Un
and create main test code and comply norminette and don't use "for" and function as short as possible
Certainly! Here's a possible solution for the `ft_strcapitalize` function:

```c
char *ft_strcapitalize(char *str)
{
    int i = 0;
    int capitalize_next = 1;
    
    while (str[i] != '\0')
    {
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z'))
        {
            if (capitalize_next)
            {
                if (str[i] >= 'a' && str[i] <= 'z')
                    str[i] -= 32;
                capitalize_next = 0;
            }
            else
            {
                if (str[i] >= 'A' && str[i] <= 'Z')
                    str[i] += 32;
            }
        }
        else if (str[i] >= '0' && str[i] <= '9')
        {
            capitalize_next = 0;
        }
        else
        {
            capitalize_next = 1;
        }
        
        i++;
    }
    
    return str;
}
```

Explanation:
1. We initialize the index `i` to 0 and the `capitalize_next` flag to 1.
2. We iterate over the characters of the string using a `while` loop until we reach the null terminator `'\0'`.
3. Inside the loop, we check if the current character `str[i]` is an alphanumeric character.
4. If it is an alphabet character (`a` to `z` or `A` to `Z`), we perform the following checks:
   - If `capitalize_next` is set to 1, we capitalize the current character by subtracting 32 from its ASCII value if it's a lowercase letter (`a` to `z`).
   - If `capitalize_next` is set to 0, we convert the current character to lowercase by adding 32 to its ASCII value if it's an uppercase letter (`A` to `Z`).
5. If the current character is a digit (`0` to `9`), we set `capitalize_next` to 0 to avoid capitalizing the next character.
6. If the current character is neither alphanumeric nor a digit, we set `capitalize_next` to 1 to capitalize the next character.
7. We increment the index `i` to move to the next character in the string.
8. The function returns `str` after all characters have been processed and transformed.

Here's an example of a main function to test the `ft_strcapitalize` function:

```c
#include <stdio.h>

char *ft_strcapitalize(char *str);

int main(void)
{
    char str[] = "salut, comment tu vas ? 42mots quarante-deux; cinquante+et+un";
    
    printf("%s\n", ft_strcapitalize(str)); // Output: Salut, Comment Tu Vas ? 42mots Quarante-Deux; Cinquante+Et+Un
    
    return 0;
}
```

Compile and run this code, and you should see the expected output.
