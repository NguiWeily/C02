Chapter VII
Exercise 04 : ft_str_is_lowercase
Exercise 04
ft_str_is_lowercase
Turn-in directory : ex04/
Files to turn in : ft_str_is_lowercase.c
Allowed functions : None
• Create a function that returns 1 if the string given as a parameter contains only
lowercase alphabetical characters, and 0 if it contains any other character.
• Here’s how it should be prototyped :
int
ft_str_is_lowercase(char *str);
• It should return 1 if str is empty. and create main test and comply norminette and don't use "for" and function as short as possible
Here's a possible solution for the `ft_str_is_lowercase` function:

```c
int ft_str_is_lowercase(char *str)
{
    int i = 0;
    
    while (str[i] != '\0')
    {
        if (!(str[i] >= 'a' && str[i] <= 'z'))
            return 0;
        i++;
    }
    
    return 1;
}
```

Explanation:
1. We initialize the index `i` to 0.
2. We iterate over the characters of the string using a `while` loop until we reach the null terminator `'\0'`.
3. Inside the loop, we check if the current character `str[i]` is not within the range of lowercase alphabetical characters (from 'a' to 'z'). If it's not, we return 0 immediately, indicating that the string contains a non-lowercase character.
4. If we reach the end of the string without encountering any non-lowercase character, we return 1 to indicate that the string contains only lowercase characters.
5. If the string is empty (i.e., the first character is the null terminator), the loop is not executed, and we return 1 to comply with the requirement.

Please note that this solution assumes that the input string is a valid null-terminated C string.
#include <stdio.h>

int ft_str_is_lowercase(char *str);

int main(void)
{
    char str1[] = "hello";
    char str2[] = "Hello";
    char str3[] = "123";
    char str4[] = "";
    
    printf("%d\n", ft_str_is_lowercase(str1)); // Output: 1
    printf("%d\n", ft_str_is_lowercase(str2)); // Output: 0
    printf("%d\n", ft_str_is_lowercase(str3)); // Output: 0
    printf("%d\n", ft_str_is_lowercase(str4)); // Output: 1
    
    return 0;
}
